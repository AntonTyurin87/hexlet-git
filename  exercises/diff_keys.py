
A = {'name': 'Bob', 'age': 42}
B = {}

def diff_keys(A, B):
    result = {'kept': set(), 'added': set(), 'removed': set()}
    result['kept'] = A.keys() & B.keys()
    result['added'] = B.keys() - A.keys() 
    result['removed'] = A.keys() - B.keys()

    return result

print(diff_keys(A, B))

'''
В этом упражнении вам предстоит анализировать изменения, имея старую и новую версии словаря. Требуется реализовать функцию diff_keys(), 
которая должна принимать два словаря-аргумента — "старый" и "новый" — и возвращать словарь с результатами анализа. 
Результирующий словарь должен содержать строго три ниже перечисленных ключа:

'kept' — множество ключей, которые присутствовали в старом словаре и остались в новом;

'added' — множество ключей, которые отсутствовали в старом словаре, но появились в новом;

'removed' — множество ключей, которые присутствовали в старом словаре, но в новый не вошли.

diff_keys({'name': 'Bob', 'age': 42}, {})
# {'kept': set(), 'added': set(), 'removed': {'name', 'age'}}

diff_keys({}, {'name': 'Bob', 'age': 42})
# {'kept': set(), 'added': {'name', 'age'}, 'removed': set()}

diff_keys({'a': 2}, {'a': 1})
# {'kept': {'a'}, 'added': set(), 'removed': set()}

Заметьте, значения не сравниваются — только ключи!
'''
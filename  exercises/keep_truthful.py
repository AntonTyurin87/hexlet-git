import operator

A = [True, False, "", "foo"]

B = [-3, 7]

C = {'Pine': {'5': 'School #42',}, 'Elm': {'13': {'1': 'Appartments #2, Elm st.13',},},}

T = ['Pine', '5']

def keep_truthful(A):
    D = []
    for i in A:
        if operator.truth(i):
            D.append(i)

    return D

#print(list(keep_truthful([True, False, "", "foo"])))

def abs_sum(B):
    summ = 0
    for i in B:
        summ += abs(i)
    return summ

#print(abs_sum(B))

def walk(C, T):
    for b in T:
        rez = operator.getitem(C, b)
        C  = C.get(b)
    return rez

#print(walk(C, T))

'''
В этом упражнении вам предстоит попрактиковаться в использовании встроенных функций map(), filter(), 
reduce() (эту нужно импортировать из functools). На их основе вам нужно реализовать три функции: keep_truthful(), abs_sum() и walk().

Функция keep_truthful() должна принимать на вход итерируемый источник значений и возвращать итератор, отдающий только те значения из источника, которые "истинны" 
(вам пригодится функция operator.truth).

list(keep_truthful([True, False, "", "foo"]))
# [True, 'foo']

///////////////////////////////////////////////////////////////////////////////////////////

Функция abs_sum() принимает на вход итерируемый источник чисел. 
Вернуть же функция должна сумму абсолютных значений этих чисел (используйте sum и abs).

abs_sum([-3, 7])
# 10
abs_sum([])
# 0
abs_sum([42])
# 42

///////////////////////////////////////////////////////////////////////////////////////////

walk() должна для некоего словаря с глубокой вложенностью уметь доставать значение по указанному в виде iterable строк пути. 
В решении можете использовать функцию operator.getitem.
Имейте в виду: мы считаем, что значения по указанному пути всегда доступны и сама структура словаря всегда правильная. 
Это означает, что заранее обрабатывать ошибки не нужно. Так что реализуйте "оптимистичное решение".

walk({'a': {7: {'b': 42}}}, ["a", 7, "b"])
# 42
walk({'a': {7: {'b': 42}}}, ["a", 7])
# {'b': 42}


def test_walk():
    city = {
        'Pine': {
            '5': 'School #42',
        },
        'Elm': {
            '13': {
                '1': 'Appartments #2, Elm st.13',
            },
        },
    }
    assert walk(city, ['Pine', '5']) == city['Pine']['5']
    path = ['Elm', '13', '1']
    assert walk(city, path) == city['Elm']['13']['1']

'''